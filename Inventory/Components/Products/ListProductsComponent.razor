@using Entities
@using Business

<hr />
    <select class="form-control" @onchange="CategoryChanged">
        <option value="" selected>Seleccione Categoria...</option>
        @foreach(var category in categories) {
            <option value="@category.CategoryId">@category.CategoryName</option>
        }
    </select>
<hr />

<table class="table table-responsive table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Categoria</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in tempProducts)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.CategoryId</td>
            </tr>
        }
    </tbody>
</table>

@message

@code {
    // Listamos los productos existentes
    List<ProductEntity> products = new List<ProductEntity>();
    List<ProductEntity> tempProducts = new List<ProductEntity>();
    List<CategoryEntity> categories = new List<CategoryEntity>();

    string message = "";

    // Inicializamos override
    protected override async Task OnInitializedAsync() {
        products = B_Product.ProductList();
        tempProducts = products;
        categories = B_Category.CategoryList();
    }

    // Evento para filtar por tipos de categorias
    private void CategoryChanged(ChangeEventArgs e) {
        // Obtenemos el string del mensaje cambiante
        // message = e.Value.ToString();
        if (e.Value.ToString() == "" || e.Value.ToString() == " " || e.Value.ToString() == null) {
            tempProducts = products;
        } else {
            tempProducts = products.Where(c => c.CategoryId == e.Value.ToString()).ToList();
        }
        
    }
}
