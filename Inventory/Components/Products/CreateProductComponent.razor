@using Entities
@using Business

<div>
    <EditForm Model="oProduct">
        <div class="form-group">
            <label>Referencia: </label>
            <InputText @bind-Value="oProduct.ProductId" class="form-control"/>
        </div>
        <div class="form-group">
            <label>Nombre del Producto: </label>
            <InputText @bind-Value="oProduct.ProductName" class="form-control" />
        </div>
        <div class="form-group">
            <label>Descripción: </label>
            <InputTextArea @bind-Value="oProduct.ProductDescription" class="form-control" />
        </div>
        <div class="form-group">
            <label>Categoria: </label>
            <InputSelect @bind-Value="oProduct.CategoryId" class="form-control">
                @foreach(var category in categories){
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </InputSelect>
        </div>
        <input type="button" value="Agregar Producto" @onclick="SaveProduct"/>
    </EditForm>
</div>

@code {
    // Objeto para la creación de producto
    ProductEntity oProduct = new ProductEntity();

    // Recuperamos lista - Categorias
    List<CategoryEntity> categories = new List<CategoryEntity>();

    // Inicializamos de manera asincrona para que cuando cargue interfaz, por ende cargue las categorias existentes
    protected override async Task OnInitializedAsync() {
        categories = B_Category.CategoryList();
    }

    private void SaveProduct() {
        B_Product.CreateProduct(oProduct);
    }
}
